#!/bin/bash
#
# GamePanelX
# Remote scripts v3.0.12
#
# Restart Game/Voice Servers
#
# -u: Client's gpx username  
# -i: Server IP Address (x.x.x.x)
# -p: Server Port
# -P: Server PID filename (optional). Use local paths if needed, such as "some/dir/run.pid", not "/home/me/dir/run.pid"
# -w: Server working directory to CD into for the server startup.  Again, local paths only.
# -s: Unsuspend Server (optional). Can be "yes" to unsuspend, or left empty to not.
# -o: Complete Command-Line to run. Example: "./srcds_run -game cstrike +ip x.x.x.x ..."
# -c: Taskset CPU number/core to use. (optional)
#
# Example usage:
# ./Restart -u user123 -i 192.168.10.10 -p 27015 -w orangebox -o './srcds_run -game cstrike +ip 192.168.10.10 -port 27015 +map de_dust2 +maxplayers 12'
#
srv_username=
srv_ip=
srv_port=
srv_pidfile=
working_dir=
unsuspend_srv=
srv_cmd_line=
taskset_cpu=
gpx_logging=

while getopts "u:i:p:P:w:s:o:c:l:" OPTION
do
     case $OPTION in
         u)
             srv_username=$OPTARG
             ;;
         i)
             srv_ip=$OPTARG
             ;;
         p)
             srv_port=$OPTARG
             ;;
	 P)
	     srv_pidfile=$OPTARG
	     ;;
	 w)
	     working_dir=$OPTARG
	     ;;
         s)
             unsuspend_srv=$OPTARG
             ;;
         o)
             srv_cmd_line=$OPTARG
             ;;
	 c)
	     taskset_cpu=$OPTARG
	     ;;
         l)
	     gpx_logging=$OPTARG
	     ;;
         ?)
             exit
             ;;
     esac
done

if [[ "$srv_username" == "" || "$srv_ip" == "" || "$srv_port" == "" ]]
then
  echo "Restart: Required settings were left out.  Exiting."
  exit
fi

# Check for homedir
gpxdir=$HOME/accounts/$srv_username/$srv_ip:$srv_port
serverlog=$HOME/logs/servers.log

# Log this
echo "$(date) $(hostname) Restart: Restarting $srv_ip:$srv_port for user $srv_username ..." >> $serverlog

if [ ! -d $gpxdir ]
then
        echo "Restart: Game directory ($gpxdir) doesnt exist!  Exiting."
	echo "$(date) $(hostname) Restart: Game directory ($gpxdir) doesnt exist!  Exiting." >> $serverlog
        exit
fi


if [ "$unsuspend_srv" == "yes" ]
then
    if [ -d $HOME/accounts/$srv_username/.$srv_ip\:$srv_port/ ]
    then
	echo "$(date) $(hostname) Restart: Unsuspending $srv_ip:$srv_port for user $srv_username ..." >> $serverlog
        echo y | mv $HOME/accounts/$srv_username/.$srv_ip\:$srv_port $gpxdir
    else
	echo "$(date) $(hostname) Restart: Unsuspend: Directory not found, NOT unsuspending." >> $serverlog
    fi
fi

if [ -f $gpxdir/.gpxpid ]
then
    # Use the proper current script PID
    if [ "$BASHPID" ]
    then
    	script_pid=$BASHPID
    else
	script_pid=$$
    fi

    # Stop server if running
    parent_pid=$(cat $gpxdir/.gpxpid)
    # if [[ "$parent_pid" && "$(ps -ef | awk '{print $2}' | grep \"$parent_pid\" | grep -v grep)" ]]
    if [[ "$parent_pid" && -e /proc/$parent_pid ]]
    then
        $HOME/scripts/Stop -u $srv_username -i $srv_ip -p $srv_port -r $script_pid >> /dev/null
        sleep 1
    fi
fi

# GNU Screen
if [ -f /usr/bin/screen ]; then
	screen_path="/usr/bin/screen"
elif [ -f /usr/sbin/screen ]; then
	screen_path="/usr/sbin/screen"
elif [ -f /sbin/screen ]; then
	screen_path="/sbin/screen"
elif [ -f /usr/local/bin/screen ]; then
	screen_path="/usr/local/bin/screen"
elif [ -f /usr/local/sbin/screen ]; then
        screen_path="/usr/local/sbin/screen"
else
	screen_path=
fi

while true
do
    parent_pid=$(cat $gpxdir/.gpxpid)

    # Not running currently
    # if [ "$(ps -ef | awk '{print $2}' | grep \"$parent_pid\" | grep -v grep)" == "" ]
    if [[ "$parent_pid" && ! -e /proc/$parent_pid || "$parent_pid" == "" ]]
    then
	if [ -n "$working_dir" ]
	then
		if [ -d $gpxdir/$working_dir/ ]
	        then
	        	cd $gpxdir/$working_dir/
          	else
			echo "Restart: Working directory \"$working_dir\" specified, but does not exist!  Exiting."
                        echo "$(date) $(hostname) Restart: Working directory \"$working_dir\" specified, but does not exist!  Exiting." >> $serverlog
            		#cd $gpxdir/
			
			exit
	        fi
	else
	        cd $gpxdir/
	fi

	# Taskset Support
	if [ "$taskset_cpu" ]
	then
		hash taskset 2>&- || { echo >&2 "Taskset is not available on this system.  Exiting."; exit; }
	        # taskset -c $taskset_cpu $srv_cmd_line >> /dev/null 2>&1 &
                # pid=$!
		srv_cmd_line="taskset -c $taskset_cpu "$srv_cmd_line
	else
	    gpx_logging="1" # for now, remove later

	    # !! Start Server
	    if [ "$gpx_logging" ]
	    then
		# No GNU Screen
		#if [ "$(which screen 2>&1 | grep 'no screen in')" ]
		if [ "$screen_path" == "" ]
		then
			echo "$(date) $(hostname) Restart: Warning: No GNU Screen found!  Please install screen to use all server features." >> $serverlog

			$srv_cmd_line 2>&1 > $gpxdir/.gpxsrv.log &
			pid=$!
		# Screen support
		else
			# Clean up first
			$screen_path -wipe 2>&1 >> /dev/null

			# Start screen
		if [ -f $gpxdir/$working_dir/srcds_run ]
                then
                        sed -i "s/\${SRCDS_DIR}/\./g" srcds_run
                fi
			# OLD with screen logging: screen -d -m -L -S "$srv_ip:$srv_port" $srv_cmd_line
			$screen_path -d -m -S "$srv_ip:$srv_port" $srv_cmd_line 2>&1 >> $serverlog
			screen_pid="$(screen -list | grep "$srv_ip:$srv_port" | awk '{print $1}' | awk -F. '{print $1}')"

                        # Ensure screen started...
                        sleep 1
                        if [ "$screen_pid" == "" ]; then
                                echo "$(date) $(hostname) Restart: Failed to start GNU Screen, no PID!  Exiting." >> $serverlog
                                exit
                        fi

                        if [[ "$screen_pid" && ! -e /proc/$screen_pid ]]; then
                                echo "$(date) $(hostname) Restart: Screen failed to start, check your server settings.  Exiting." >> $serverlog
                                exit
                        fi

                        pid=$(ps -ef | awk '{print $2,$3}' | grep "$screen_pid" | sort -n | tail -1 | awk '{print $1}')
                        echo $screen_pid > $gpxdir/.gpxscreen.pid

		fi
	    else
		$srv_cmd_line >> /dev/null 2>&1 &
		pid=$!
	    fi
	    # !! End start server
	fi

	# Save PID
        echo $pid > $gpxdir/.gpxpid

	# If server has it's own PID, save that to ours
        if [ -n "$srv_pidfile" ]
        then
            sleep 2
            if [ -f $gpxdir/$srv_pidfile ]
            then
                echo y | cp $gpxdir/$srv_pidfile $gpxdir/.gpxpid
                parent_pid=`cat $gpxdir/.gpxpid`
            fi
        fi
    fi

    # Sleep the check if server has died
    sleep 3

# Fork off this loop so this script can exit and continue checking for a dead server
done >> /dev/null 2>&1 &
res_pid=$!

# Make sure restart PID file exists
if [ ! -f $gpxdir/.gpxrespid ]
then
	touch $gpxdir/.gpxrespid
fi

if [ "$res_pid" ]
then
	echo $res_pid > $gpxdir/.gpxrespid
fi

echo "success"
